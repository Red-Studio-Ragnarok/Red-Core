import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'io.freefair.lombok' version '8.+'
    id 'com.github.gmazzo.buildconfig' version '4.+'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.+'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.+'
}

// Add version to the jar name
version = project.version

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(JvmVendorSpec.AZUL)
    }
    // Generate sources jar when building and publishing
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.fork = true
}

minecraft {
    mcVersion = '1.12.2'
    username = 'Desoroxxx'
    extraRunJvmArguments.addAll('-Xmx6G', '-Xms4G', '-Dforge.logging.console.level=debug', '-Dfml.coreMods.load=dev.redstudio.redcore.RedCore')
}

configurations {
    implementation
    compile.extendsFrom(embed)
}

dependencies {
    implementation 'net.jafama:jafama:2.+'
    embed 'net.jafama:jafama:2.+'
}

buildConfig {
    buildConfigField("String", "ID", "\"${project.id}\"")
    buildConfigField("String", "VERSION", "\"${project.version}\"")
}

jar {
    manifest.attributes([
            'ModSide': 'BOTH',
            'FMLCorePlugin': 'dev.redstudio.redcore.RedCore',
            'FMLCorePluginContainsFMLMod': true,
            'ForceLoadAsMod': true
    ])

    from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })
    archiveBaseName.set('!Red-Core')
}

idea {
    module {
        inheritOutputDirs = true
        excludeDirs = [
                file('.settings'),
                file('.github'),
                file('.gradle'),
                file('gradle'),
                file('.idea'),
                file('build'),
                file('run'),
                file('bin')
        ]
    }

    project {
        jdkName = '1.8'
        languageLevel = '1.8'

        settings {
            runConfigurations {
                'Client'(Gradle) {
                    taskNames = ['runClient']
                }
                'Server'(Gradle) {
                    taskNames = ['runServer']
                }
                'Obfuscated Client'(Gradle) {
                    taskNames = ['runObfClient']
                }
                'Obfuscated Server'(Gradle) {
                    taskNames = ['runObfServer']
                }
                'Vanilla Client'(Gradle) {
                    taskNames = ['runVanillaClient']
                }
                'Vanilla Server'(Gradle) {
                    taskNames = ['runVanillaServer']
                }
            }

            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = '-encoding utf8'
                    moduleJavacAdditionalOptions = [(project.id + '.main'): tasks.compileJava.options.compilerArgs.collect { " $it " }.join(' ')]
                }
            }
        }
    }
}
